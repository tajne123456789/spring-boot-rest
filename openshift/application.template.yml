apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: service-template
  annotations:
    csas/deployment.vcs-url: "git@github.com:tajne123456789/spring-boot-rest.git"
    csas/deployment.vcs-ref: "master"
    csas/deployment.vcs-root: "openshift"

#parameters:
#  # System parameters
#  - name: SERVICE_NAME
#    displayName: "Configuration Name"
#    description: "Name of the deployment configuration objects"
#    required: true
#    value: "nia-adapter"
#
#  - name: IMAGE_STREAM_TAG
#    displayName: "Image Stream Tag"
#    description: "Docker image used for deployment"
#    required: true
#
#  - name: IMAGE_STREAM_NAMESPACE
#    displayName: "Image Stream Namespace"
#    description: "Namespace where is source image stream defined"
#
#    # this ID is added to config objects to distinct config versions - to prevent overwriting configuration
#  - name: DEPLOYMENT_ID
#    displayName: "Deployment Id"
#    description: "Id string used for versioning ConfigMaps"
#    generate: expression
#    from: "[a-z0-9]{8}"
#
#  - name: KAFKA_SERVERS
#    description: "z env souboru"
#    displayName: "kafka servers"
#    value: "kafkaservers"
#
#  - name: KAFKA_REGISTRY
#    description: "z env souboru"
#    displayName: "kafka registry"
#    value: "kafkaregistry"
#
#  - name: KAFKA_RETRY_INTERVAL
#    description: "z env souboru"
#    displayName: "kafka retry interval"
#    value: ""
#
#  - name: KAFKA_RETRY_ATTEMPTS
#    description: "z env souboru"
#    displayName: "kafka retry attempts"
#    value: ""
#
#  - name: KAFKA_TIMEOUT_SEND
#    description: "z env souboru"
#    displayName: "kafka send timeout"
#    value: ""
#
#  - name: KAFKA_LISTENER_CONCURRENCY
#    description: "z env souboru"
#    displayName: "kafka listener concurrency"
#    value: ""
#
#  - name: KAFKA_MAX_POLL_RECORDS
#    description: "z env souboru"
#    displayName: "kafka max poll records"
#    value: ""
#
#  - name: KAFKA_MAX_POLL_INTERVAL
#    description: "z env souboru"
#    displayName: "kafka max poll interval in ms"
#    value: ""
#
#  - name: ENDPOINT_CASE_MANAGEMENT
#    description: "z env souboru"
#    displayName: "Endpoint for Case Management"
#    value: ""
#
#  - name: SPRING_ACTIVE_PROFILES
#    description: "z env souboru"
#    displayName: "Aktivni profil"
#    value: ""
#
#  - name: FEIGN_CLIENT_TIMEOUT_CONNECTION
#    description: "z env souboru"
#    displayName: "Feign client connection timeout"
#    value: ""
#
#  - name: FEIGN_CLIENT_TIMEOUT_READ
#    description: "z env souboru"
#    displayName: "Feign client read timeout"
#    value: ""
#
#  - name: REPLICAS
#    displayName: "Number of replicas"
#    description: "Number of replicas"
#    required: true
#    value: "1"
#
#  - name: LOG_LEVEL
#    description: "z env souboru"
#    displayName: "Level of logging"
#    value: ""

objects:
#  - apiVersion: v1
#    kind: ConfigMap
#    data:
#      application.properties: |
#        spring.kafka.bootstrap-servers=${KAFKA_SERVERS}
#        spring.kafka.properties.schema.registry.url=${KAFKA_REGISTRY}
#        spring.profiles.active=${SPRING_ACTIVE_PROFILES}
#        feign.client.case-management.url=${ENDPOINT_CASE_MANAGEMENT}
#        kafka.retry-interval=${KAFKA_RETRY_INTERVAL}
#        kafka.retry-attempts=${KAFKA_RETRY_ATTEMPTS}
#        kafka.send-timeout=${KAFKA_TIMEOUT_SEND}
#        kafka.listener-concurrency=${KAFKA_LISTENER_CONCURRENCY}
#        kafka.max-poll.records=${KAFKA_MAX_POLL_RECORDS}
#        kafka.max-poll.interval=${KAFKA_MAX_POLL_INTERVAL}
#        feign.client.config.default.connectTimeout=${FEIGN_CLIENT_TIMEOUT_CONNECTION}
#        feign.client.config.default.readTimeout=${FEIGN_CLIENT_TIMEOUT_READ}
#        logging.level.root=${LOG_LEVEL}
#    metadata:
#      name: spring-boot-rest

  - kind: Service
    apiVersion: v1
    metadata:
      annotations:
        openshift.io/generated-by: OpenShiftWebConsole
      labels:
        app: ${SERVICE_NAME}
      name: ${SERVICE_NAME}
    spec:
      ports:
        - name: 8080-tcp
          port: 8080
          protocol: TCP
          targetPort: 8080
        - name: 8443-tcp
          port: 8443
          protocol: TCP
          targetPort: 8443
        - name: 8778-tcp
          port: 8778
          protocol: TCP
          targetPort: 8778
      selector:
        deploymentconfig: ${SERVICE_NAME}
      sessionAffinity: None
      type: ClusterIP

  # Route - tells what port(s) are axposed and how
  - apiVersion: v1
    kind: Route
    metadata:
      name: "${SERVICE_NAME}"
      labels:
        app: "${SERVICE_NAME}"
    spec:
      to:
        name: "${SERVICE_NAME}"
      port:
        targetPort: 8080-tcp
      tls:
        termination: edge

  # Deployment Config - describes how the app is deployed
  - apiVersion: apps.openshift.io/v1
    kind: DeploymentConfig
    metadata:
      annotations:
        openshift.io/generated-by: OpenShiftWebConsole
      generation: 9
      labels:
        app: ${SERVICE_NAME}
      name: ${SERVICE_NAME}
    spec:
      replicas: ${REPLICAS}
      strategy:
        type: Rolling
        rollingParams:
          updatePeriodSeconds: 10
          intervalSeconds: 30
      selector:
        name: "${SERVICE_NAME}"
      template:
        metadata:
          labels:
            name: "${SERVICE_NAME}"
        spec:
          containers:
            - image: ' '
              name: app
              ports:
                - containerPort: 8080
                  protocol: TCP
                - containerPort: 8443
                  protocol: TCP
                - containerPort: 8778
                  protocol: TCP
              resources: {}
#                requests:
#                  memory: 750Mi
#                limits:
#                  memory: 4Gi
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
#              volumeMounts:
#                - mountPath: /opt/app-root/logs
#                  name: logs-volume
#                - mountPath: /app/config
#                  name: config-volume
#                - mountPath: /app/secret
#                  name: secret-volume
#                - mountPath: /app/kafka-cert
#                  name: ssl-certifikate-volume
#                  readOnly: true
#              readinessProbe:
#                failureThreshold: 3
#                httpGet:
#                  path: /actuator/health
#                  port: 8080
#                  scheme: HTTP
#                initialDelaySeconds: 30
#                periodSeconds: 10
#                successThreshold: 1
#                timeoutSeconds: 2
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext: {}
          terminationGracePeriodSeconds: 30
#          volumes: {}
#            - name: logs-volume
#              emptyDir: {}
#            - name: config-volume
#              configMap:
#                name: niaconfig-adapter
#                defaultMode: 420
#            - name: secret-volume
#              secret:
#                secretName: niapass-adapter
#                defaultMode: 420
#            - name: ssl-certifikate-volume
#              secret:
#                secretName: ssl-certifikat
      test: false
      triggers:
        - type: ConfigChange
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - app
            from:
              kind: ImageStreamTag
              name: "${IMAGE_STREAM_TAG}"
              namespace: "${IMAGE_STREAM_NAMESPACE}"